name: Rust

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.0
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgres://postgres:password@localhost:5432/openagents_test"
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Create test database
        run: |
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "CREATE DATABASE openagents_test;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "GRANT ALL PRIVILEGES ON DATABASE openagents_test TO ${APP_USER};"

      - name: Setup configuration
        run: |
          mkdir -p configuration
          echo "application:
            port: 8080
            host: 0.0.0.0
            admin_token: admin-token
          environment: production" > configuration/base.yaml
          
          echo "application:
            host: 0.0.0.0
            admin_token: admin-token
          database:
            require_ssl: false
          environment: production" > configuration/production.yaml
          
          echo "application:
            host: 0.0.0.0
            admin_token: admin-token
          database:
            require_ssl: false
          environment: production" > configuration/local.yaml

      - name: Verify environment
        run: |
          echo "APP_ENVIRONMENT=$APP_ENVIRONMENT"
          echo "Current config files:"
          cat configuration/base.yaml
          cat configuration/production.yaml
          cat configuration/local.yaml

      - name: Run SQLx migrations
        run: |
          cargo sqlx database create
          cargo sqlx migrate run

      - name: Run tests
        run: |
          export APP_ENVIRONMENT=production
          echo "APP_ENVIRONMENT is set to: $APP_ENVIRONMENT"
          cargo test

      - name: Check that queries are fresh
        run: cargo sqlx prepare --workspace --check -- --all-targets

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgres://postgres:password@localhost:5432/openagents_test"
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Create test database
        run: |
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "CREATE DATABASE openagents_test;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "GRANT ALL PRIVILEGES ON DATABASE openagents_test TO ${APP_USER};"

      - name: Setup configuration
        run: |
          mkdir -p configuration
          echo "application:
            port: 8080
            host: 0.0.0.0
            admin_token: admin-token
          environment: production" > configuration/base.yaml
          
          echo "application:
            host: 0.0.0.0
            admin_token: admin-token
          database:
            require_ssl: false
          environment: production" > configuration/production.yaml
          
          echo "application:
            host: 0.0.0.0
            admin_token: admin-token
          database:
            require_ssl: false
          environment: production" > configuration/local.yaml

      - name: Verify environment
        run: |
          echo "APP_ENVIRONMENT=$APP_ENVIRONMENT"
          echo "Current config files:"
          cat configuration/base.yaml
          cat configuration/production.yaml
          cat configuration/local.yaml

      - name: Run SQLx migrations
        run: |
          cargo sqlx database create
          cargo sqlx migrate run

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: |
          export APP_ENVIRONMENT=production
          echo "APP_ENVIRONMENT is set to: $APP_ENVIRONMENT"
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage

      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/
